#Copyright 2021 solo-learn development team.

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
# Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import math
import warnings
from typing import List, Tuple

import torch
import torch.distributed as dist
import torch.nn as nn
import torch.nn.functional as F


def _1d_filter(tensor: torch.Tensor) -> torch.Tensor:
    return tensor.isfinite()


def _2d_filter(tensor: torch.Tensor) -> torch.Tensor:
    return tensor.isfinite().all(dim=1)


def _single_input_filter(tensor: torch.Tensor) -> Tuple[torch.Tensor]:
    if len(tensor.size()) == 1:
        filter_func = _1d_filter
    elif len(tensor.size()) == 2:
        filter_func = _2d_filter
    else:
        raise RuntimeError("Only 1d and 2d tensors are supported.")

    selected = filter_func(tensor)
    tensor = tensor[selected]

    return tensor, selected


def _multi_input_filter(tensors: List[torch.Tensor]) -> Tuple[torch.Tensor]:
    if len(tensors[0].size()) == 1:
        filter_func = _1d_filter
    elif len(tensors[0].size()) == 2:
        filter_func = _2d_filter
    else:
        raise RuntimeError("Only 1d and 2d tensors are supported.")

    selected = filter_func(tensors[0])
    for tensor in tensors[1:]:
        selected = torch.logical_and(selected, filter_func(tensor))
    tensors = [tensor[selected] for tensor in tensors]

    return tensors, selected


def filter_inf_n_nan(tensors: List[torch.Tensor], return_indexes: bool = False):
    """Filters out inf and nans from any tensor.
    This is usefull when there are instability issues,
    which cause a small number of values to go bad.
    Args:
        tensor (List): tensor to remove nans and infs from.
    Returns:
        torch.Tensor: filtered view of the tensor without nans or infs.
    """

    if isinstance(tensors, torch.Tensor):
        tensors, selected = _single_input_filter(tensors)
    else:
        tensors, selected = _multi_input_filter(tensors)

    if return_indexes:
        return tensors, selected
    return tensors


class FilterInfNNan(nn.Module):
    def __init__(self, module):
        """Layer that filters out inf and nans from any tensor.
        This is usefull when there are instability issues,
        which cause a small number of values to go bad.
        Args:
            tensor (List): tensor to remove nans and infs from.
        Returns:
            torch.Tensor: filtered view of the tensor without nans or infs.
        """
        super().__init__()

        self.module = module

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        out = self.module(x)
        out = filter_inf_n_nan(out)
        return out

    def __getattr__(self, name):
        try:
            return super().__getattr__(name)
        except AttributeError:
            if name == "module":
                raise AttributeError()
            return getattr(self.module, name)


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    """Copy & paste from PyTorch official master until it's in a few official releases - RW
    Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    """

    def norm_cdf(x):
        """Computes standard normal cumulative distribution function"""

        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    """Copy & paste from PyTorch official master until it's in a few official releases - RW
    Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    """

    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def get_rank():
    if dist.is_available() and dist.is_initialized():
        return dist.get_rank()
    return 0

class GatherLayer(torch.autograd.Function):
    """
    Gathers tensors from all process and supports backward propagation for the gradients across processes.
    """
    @staticmethod
    def forward(ctx, x):
        if dist.is_available() and dist.is_initialized() and torch.distributed.get_world_size()>1:
            print("distributed")
            ctx.batch_size = x.shape[0]
            output = [torch.zeros_like(x) for _ in range(dist.get_world_size())]
            dist.all_gather(output, x)
        else:
            output = [x]
        return tuple(output)

    @staticmethod
    def backward(ctx, *grads):
        if dist.is_available() and dist.is_initialized() and torch.distributed.get_world_size()>1:
            # all_gradients = torch.stack(grads)
            # dist.all_reduce(all_gradients)
            # grad_out = all_gradients[get_rank()]
            grad_input = torch.stack(grads).clone()
            torch.distributed.all_reduce(grad_input, op=torch.distributed.ReduceOp.SUM, async_op=False)

            idx_from = torch.distributed.get_rank() * ctx.batch_size
            idx_to = (torch.distributed.get_rank() + 1) * ctx.batch_size
            return grad_input[idx_from:idx_to]
        else:
            grad_out = grads[0]
        return grad_out

# class GatherLayer(torch.autograd.Function):
#     @staticmethod
#     def forward(ctx, tensor):
#         gathered = [torch.zeros_like(tensor) for _ in range(dist.get_world_size())]
#         dist.all_gather(gathered, tensor)
#         return tuple(gathered)
#
#     @staticmethod
#     def backward(ctx, *grad_outs):
#         grad_outs = torch.stack(grad_outs)
#         dist.all_reduce(grad_outs)
#         return grad_outs[dist.get_rank()]

# class GatherLayer(torch.autograd.Function):
# class GatherLayer(torch.autograd.Function):
#     @staticmethod
#     def forward(ctx, x):
#         world_size = dist.get_world_size()
#         total_features = torch.zeros(x.size()[0] * world_size, x.size()[1], device=x.device)
#         dist.all_gather(list(total_features.chunk(world_size, dim=0)), x.data)
#         total_features.requires_grad = True
#         return total_features
#
#     @staticmethod
#     def backward(ctx, *grad_output):
#
#         world_size = dist.get_world_size()
#         grad_x = None
#
#         if grad_output is not None:
#             grad_output.detach_()
#             x_grad = torch.zeros_like(grad_output[0])
#
#             # Feature gradient all-reduce
#             dist.reduce_scatter(x_grad, grad_output)
#             x_grad.div_(world_size)
#
#         grad_x = x_grad
#
#         return grad_x

# class GatherLayer(torch.autograd.Function):
#     '''Gather tensors from all process, supporting backward propagation.
#     '''
#
#     @staticmethod
#     def forward(ctx, input):
#         ctx.save_for_backward(input)
#         output = [torch.zeros_like(input) \
#             for _ in range(dist.get_world_size())]
#         dist.all_gather(output, input)
#         return tuple(output)
#
#     @staticmethod
#     def backward(ctx, *grads):
#         input, = ctx.saved_tensors
#         grad_out = torch.zeros_like(input)
#         grad_out[:] = grads[dist.get_rank()]
#         return grad_out

# class GatherLayer(torch.autograd.Function):
#     """
#     all_gather with gradient back-propagation
#     """
#     @staticmethod
#     def forward(ctx, tensor):
#         tensor_list = [torch.zeros_like(tensor) for _ in range(dist.get_world_size())]
#         dist.all_gather(tensor_list, tensor)
#         return tuple(tensor_list)
#
#     @staticmethod
#     def backward(ctx, *grad_list):
#         grad_list = list(grad_list)
#         rank = dist.get_rank()
#
#         dist_ops = [
#             dist.reduce(grad_list[i], i, async_op=True) for i in range(dist.get_world_size())
#         ]
#         for op in dist_ops:
#             op.wait()
#
#         return None, grad_list[rank]


def gather(X, dim=0):
    """Gathers tensors from all processes, supporting backward propagation."""
    return torch.cat(GatherLayer.apply(X), dim=dim)